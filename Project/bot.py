import logging
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message, InputFile, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
import yandex_music
import os
import asyncio

from config import TOKEN, TOKEN_1
import client  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–µ–π–ª–∏—Å—Ç–∞–º–∏

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN_1)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Yandex Music –∫–ª–∏–µ–Ω—Ç–∞
YANDEX_MUSIC_TOKEN = TOKEN
ym_client = yandex_music.Client(YANDEX_MUSIC_TOKEN).init()


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton("üéµ –ù–∞–π—Ç–∏ —Ç—Ä–µ–∫")],
            [KeyboardButton("üìÄ –ù–∞–π—Ç–∏ –∞–ª—å–±–æ–º")],
            [KeyboardButton("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞–º–∏")],
        ],
        resize_keyboard=True
    )
    return keyboard


def playlist_menu():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç", callback_data="create_playlist")],
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –≤ –ø–ª–µ–π–ª–∏—Å—Ç", callback_data="add_to_playlist")],
            [InlineKeyboardButton(text="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç", callback_data="play_playlist")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")],
        ]
    )
    return keyboard


# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message(Command(commands=['start']))
async def send_welcome(message: Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=main_menu())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message()
async def handle_main_menu(message: Message):
    if message.text == "üéµ –ù–∞–π—Ç–∏ —Ç—Ä–µ–∫":
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫:")
    elif message.text == "üìÄ –ù–∞–π—Ç–∏ –∞–ª—å–±–æ–º":
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–ª—å–±–æ–º:")
    elif message.text == "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞–º–∏":
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=playlist_menu())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥–º–µ–Ω—é –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
@dp.callback_query()
async def handle_playlist_menu(callback: CallbackQuery):
    if callback.data == "create_playlist":
        await callback.message.reply("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞:")
    elif callback.data == "add_to_playlist":
        await callback.message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
    elif callback.data == "play_playlist":
        await callback.message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:")
    elif callback.data == "back_to_main":
        await callback.message.edit_text("–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())


# –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–ª–µ–π–ª–∏—Å—Ç–∞–º–∏ —á–µ—Ä–µ–∑ client
@dp.message()
async def handle_create_playlist(message: Message):
    playlist_name = parse_user_input(message)
    if not playlist_name:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞.")
        return

    try:
        client.add_playlist(playlist_name)  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞
        await message.reply(f"–ü–ª–µ–π–ª–∏—Å—Ç '{playlist_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e}")
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message()
async def handle_add_to_playlist(message: Message):
    user_input = parse_user_input(message)
    if not user_input or ',' not in user_input:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
        return

    track_name, playlist_name = map(str.strip, user_input.split(',', 1))
    try:
        client.add_song_to_playlist(playlist_name, track_name)  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞
        await message.reply(f"–¢—Ä–µ–∫ '{track_name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–ª–µ–π–ª–∏—Å—Ç '{playlist_name}'.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞ –≤ –ø–ª–µ–π–ª–∏—Å—Ç: {e}")
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ –≤ –ø–ª–µ–π–ª–∏—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message()
async def handle_play_playlist(message: Message):
    playlist_name = parse_user_input(message)
    if not playlist_name:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–ª–µ–π–ª–∏—Å—Ç–∞ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.")
        return

    try:
        tracks = client.print_playlist(playlist_name)  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤
        if not tracks:
            await message.reply(f"–ü–ª–µ–π–ª–∏—Å—Ç '{playlist_name}' –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        await message.reply(f"–ù–∞—á–∏–Ω–∞—é –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ '{playlist_name}':")
        for track in tracks:
            await send_track_to_user(track, message, is_album=True)
            await asyncio.sleep(1)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e}")
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
def parse_user_input(message: Message) -> str:
    return message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else ""


async def find_track(arg: str):
    if "music.yandex.ru" in arg:
        track_id = arg.split("/")[-1].split("?")[0]
        return ym_client.tracks([track_id])[0]
    else:
        search_results = ym_client.search(arg)
        return search_results.best.result if search_results.best else None


async def find_album(arg: str):
    if "music.yandex.ru" in arg:
        album_id = arg.split("/")[-1].split("?")[0]
        return ym_client.albums_with_tracks(album_id)
    else:
        search_results = ym_client.search(arg)
        if search_results.albums:
            album = search_results.albums.results[0]
            return ym_client.albums_with_tracks(album.id)
        return None


async def send_track_to_user(track, message: Message, is_album=False):
    artist_names = ', '.join(artist.name for artist in track.artists)
    track_filename = f"{artist_names} - {track.title}.mp3"

    try:
        track.download(track_filename)
        audio_file = InputFile(track_filename)
        await message.reply_document(audio_file)

        if not is_album:
            await message.reply(
                f"–¢—Ä–µ–∫ {artist_names} - {track.title} –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞"
            )
    finally:
        await asyncio.sleep(5)
        if os.path.exists(track_filename):
            os.remove(track_filename)


async def send_album_to_user(album, message: Message):
    album_name = album.title
    artist_names = ', '.join(artist.name for artist in album.artists)
    await message.reply(f"–ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ç—Ä–µ–∫–æ–≤ –∏–∑ –∞–ª—å–±–æ–º–∞: {album_name} - {artist_names}")

    for volume in album.volumes:
        for track in volume:
            await send_track_to_user(track, message, is_album=True)
            await asyncio.sleep(2)

    await message.reply(
        f"–ê–ª—å–±–æ–º {artist_names} - {album_name} –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é!\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞"
    )


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


if __name__ == '__main__':
    asyncio.run(main())
